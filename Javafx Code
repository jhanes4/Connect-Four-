import javafx.animation.TranslateTransition;
import javafx.application.Application;
import javafx.beans.property.SimpleObjectProperty;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Path;
import javafx.scene.shape.Rectangle;
import javafx.scene.shape.Shape;
import javafx.stage.Stage;
import javafx.util.Duration;
public class Main extends Application {
    private final SimpleObjectProperty<Color> playerColorProperty = new SimpleObjectProperty<>(Color.BLACK);
    private int row, column;
    Stage window;
    Scene scene1, scene;
  
    public static void main(String[] args) {
        launch(args);
    }
    @Override
    public void start (Stage primaryStage) throws Exception  {
        
        
        
       
        
        
        
        final BorderPane root = new BorderPane();
        final GridPane grid = new GridPane();
        primaryStage.setTitle("Connect Four");
        scene = new Scene(root, 950, 700);
        scene.setFill(Color.WHITE);
       
        grid.setPadding(new Insets(100, 100, 100, 165));
        grid.setGridLinesVisible(true);
        grid.setStyle("-fx-background-color: white");
        
       
        final int numCols = 7;
        final int numRows = 6;
       
        for(int i = 1; i < numCols; i++) {
           ColumnConstraints colConst = new ColumnConstraints();
           colConst.setPercentWidth(100.0 / numCols);
           grid.getColumnConstraints().add(colConst);
           
        }
        for (int i =0; i < numRows; i++) {
            RowConstraints rowConst = new RowConstraints();
            rowConst.setPercentHeight(100.0 / numRows);
            grid.getRowConstraints().add(rowConst);
        }

        createGrids(grid);
        root.setCenter(grid);
        primaryStage.setScene(scene);
        primaryStage.setResizable(false);
        primaryStage.show();

    }
    
    private void createGrids(final GridPane grid){
        
        
                for(row = 0; row < grid.getColumnConstraints().size(); row++){
            for(column = 0; column < grid.getColumnConstraints().size(); column++){              

            Rectangle rectangle = new Rectangle(100f,100f);
            Circle circle = new Circle(47f);
            circle.centerXProperty().set(50f);
            circle.centerYProperty().set(50f);
            Shape cell = Path.subtract(rectangle, circle);
            cell.setFill(Color.GREY);
            cell.setStroke(Color.ORANGE);
            
            final Circle diskPreview = new Circle(47);
            diskPreview.setFill(Color.TRANSPARENT);
            
            
            
            diskPreview.setOnMouseEntered((MouseEvent arg0) -> {
                diskPreview.setFill(Color.WHITE);
                if(playerColorProperty.get()==Color.BLACK){
                    diskPreview.setFill(Color.BLACK);
                }
                else {
                    diskPreview.setFill(Color.RED);
                }
            });
            diskPreview.setOnMouseExited((MouseEvent arg0) -> {
                diskPreview.setFill(Color.TRANSPARENT);
            });
            final Circle disk = new Circle(47);
            disk.fillProperty().bind(playerColorProperty);
            disk.setTranslateY(-(100*(row + 1.05)));           

            final TranslateTransition translateTranstion = new TranslateTransition(Duration.millis(700), disk);
            disk.setOnMouseEntered((MouseEvent arg0) -> {
                diskPreview.setFill(Color.WHITE);
                if(playerColorProperty.get()==Color.BLACK){
                    diskPreview.setFill(Color.BLACK);
                }
                else {
                    diskPreview.setFill(Color.RED);
                }
            });
           disk.setOnMouseExited((MouseEvent arg0) -> {
               diskPreview.setFill(Color.TRANSPARENT);
            });
            disk.setOnMouseClicked((MouseEvent arg0) -> {
                if(disk.getTranslateY()!=0){
                    translateTranstion.setToY(0);
                    translateTranstion.play();
                    if(playerColorProperty.get()==Color.BLACK){
                        playerColorProperty.set(Color.RED);
                        disk.fillProperty().bind(new SimpleObjectProperty<>(Color.BLACK));
                    }
                    else {
                        playerColorProperty.set(Color.BLACK);
                        disk.fillProperty().bind(new SimpleObjectProperty<>(Color.RED));
                    }
                }
            });
            diskPreview.setOnMouseClicked((MouseEvent arg0) -> {
                if(disk.getTranslateY()!=0){
                    translateTranstion.setToY(0);
                    translateTranstion.play();
                    if(playerColorProperty.get()==Color.BLACK){
                        playerColorProperty.set(Color.RED);
                        disk.fillProperty().bind(new SimpleObjectProperty<>(Color.BLACK));
                    }
                    else {
                        playerColorProperty.set(Color.BLACK);
                        disk.fillProperty().bind(new SimpleObjectProperty<>(Color.RED));
                    }
                    
                }
            });
     StackPane stack = new StackPane();
            stack.getChildren().addAll(cell, diskPreview, disk);
            grid.add(stack, column, row);
                }
            
            }
        }

}
